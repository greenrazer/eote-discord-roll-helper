<!DOCTYPE html>
<html>
  <head>
    <title>Edge Of The Empire Helper</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css"
			integrity="sha512-HK5fgLBL+xu6dm/Ii3z4xhlSUyZgTT9tuc/hSrtw6uzJOvgRr2a9jyxxT1ely+B+xFAmJKVSTbpM/CuL7qxO8w=="
			crossorigin="anonymous" />
		<style>
			{%style_info%}
		</style>
  </head>
  <body>
		<div>
			<button onclick="createNewCharacter()">
				<span>Create New Character</span>
			</button>
			<div id="character-selector">
				<label for="character">Choose A Character:</label>
				<select name="character" id="character"></select>
			</div>
		</div>

		<div id="character-window">
			<div>
				<label for="name">Character Name:</label>
  			<input type="text" id="name" name="name">
			</div>
			<table>
				<tr>
					<th>Total XP</th>
					<th>Used XP</th>
					<th>Unused XP</th>
				</tr>
				<tr>
					<td>
						<input type="number" id="total-xp" name="total-xp" min="0">
					</td>
					<td id="used-xp"></td>
					<td id="unused-xp"></td>
				</tr>
			</table>
			<table>
				<tr id="characteristics-header">
				</tr>
				<tr id="characteristics-values">
				</tr>
				<tr id="characteristics-rolls">
				</tr>
			</table>
			<table id="skills">
			</table>
			<div id="difficulty-popup" style="display:none;background-color:gray;">
			</div>

			<div id="status-popup" style="display:none;background-color:gray;">
			</div>

			<button onclick="sendSave()">
				<span>Save</span>
			</button>

			<button onclick="sendDestiny()">
				<span>Destiny</span>
			</button>
		</div>

		<button onclick="sendShutdownServer()">
			<span>Shutdown</span>
		</button>

		<script>
			var postSeperator = "{%post_seperator%}"
			var playerData = {%player_data%}
			var defaultPlayerData = {%default_player_data%}

			var currentCharacter = 0
			var currentSkill = null
			var currentCharacteristic = null

			function createNewCharacter() {
				playerData.push(deepCopy(defaultPlayerData))
				currentCharacter = playerData.length - 1
				renderPage()
			}

			Object.defineProperty(String.prototype, 'capitalize', {
				value: function() {
					return this.charAt(0).toUpperCase() + this.slice(1);
				},
				enumerable: false
			});

			document.addEventListener('DOMContentLoaded', renderPage)

			function renderPage() {
				if(fillCharacters()) {
					renderCharacter()
				}
			}

			function deepCopy(obj){
				return JSON.parse(JSON.stringify(obj))
			}

			function renderCharacter() {
				fillName()
				fillCharacteristics()
				fillDifficultyPopup()
				fillSkills()
				fillXP()
			}

			function fillName() {
				let nameBox = document.getElementById("name")
				removeAllListeners(nameBox)
				nameBox = document.getElementById("name")
				nameBox.value =	playerData[currentCharacter]["base"]["name"]
				nameBox.addEventListener("change", (event) => {
					playerData[currentCharacter]["base"]["name"] = event.target.value
					renderPage()
				})
			}

			// return false if there are no characters
			function fillCharacters() {
				if (playerData.length == 0){
					document.getElementById("character-selector").style = "display:none;"
					document.getElementById("character-window").style = "display:none;"
					return false
				}

				let characterSelector = document.getElementById("character")
				removeAllChildNodes(characterSelector)
				removeAllListeners(characterSelector)
				characterSelector = document.getElementById("character")

				for (let player of playerData) {
					let option = document.createElement('option')
					option.setAttribute("value", player["base"]["name"])
					option.innerHTML = player["base"]["name"]
					characterSelector.appendChild(option)
				}

				characterSelector.selectedIndex = currentCharacter;

				characterSelector.addEventListener("change", (event) => {
					currentCharacter = event.target.selectedIndex
					renderCharacter()
				})

				document.getElementById("character-selector").style = "display:block;"
				document.getElementById("character-window").style = "display:block;"
				
				return true
			}

			function fillCharacteristics() {
				const char_header = document.getElementById("characteristics-header")
				const char_values = document.getElementById("characteristics-values")
				const char_roles = document.getElementById("characteristics-rolls")

				removeAllChildNodes(char_header)
				removeAllChildNodes(char_values)
				removeAllChildNodes(char_roles)

				for (const [characteristic, info] of Object.entries(playerData[currentCharacter]["characteristics"])) {
					char_header.innerHTML += `<th>${characteristic.capitalize()}</th>`

					const td_elem = document.createElement('td')
					td_elem.setAttribute("id", characteristic)

					const input_elem = document.createElement('input')
					input_elem.type = 'number'
					input_elem.name = characteristic
					input_elem.min = 0
					input_elem.setAttribute('value', info["rank"])
					input_elem.addEventListener("change", (event) => {
						playerData[currentCharacter]["characteristics"][characteristic]["rank"] = parseInt(event.target.value)
						calculateXP()
					})

					td_elem.appendChild(input_elem)

					char_values.appendChild(td_elem)

					const td_elem_2 = document.createElement('td')
					const button_elem = document.createElement('button')
					button_elem.innerHTML = "Roll"
					button_elem.addEventListener('click', function () {
						currentCharacteristic = characteristic
						const diff_elem = document.getElementById("difficulty-popup")
						diff_elem.style.display = "block"
					})

					td_elem_2.appendChild(button_elem)

					char_roles.appendChild(td_elem_2)
				}
			}

			function fillDifficultyPopup() {
				const diff_elem = document.getElementById("difficulty-popup")
				removeAllChildNodes(diff_elem)

				for (let cla of ['blue', 'purple', 'black', 'red']) {
					const die_elem = document.createElement("div")
					die_elem.class = "wid100"

					const die_name_elem = document.createElement("span")
					die_name_elem.innerHTML = cla.capitalize()

					die_elem.appendChild(die_name_elem)
					die_elem.appendChild(makeLevelSelector(cla))

					diff_elem.appendChild(die_elem)
				}

				const button_elem = document.createElement('button')
				button_elem.innerHTML = "Roll"
				button_elem.addEventListener('click', function () {
					
					let dieVals;
					if (currentSkill != null){
						dieVals = getDieValuesForSkill(currentSkill)
					}
					else if(currentCharacteristic != null) {
						dieVals = getDieValuesForCharacteristic(currentCharacteristic)
					}

					sendRoll(dieVals, () => {
						currentSkill = null
						currentCharacteristic = null
						const diff_elem = document.getElementById("difficulty-popup")
						diff_elem.style.display = "none"
						clearDifficultyLevels()
					})
				})

				diff_elem.appendChild(button_elem)

				const sending_text_elem = document.createElement("div")
				sending_text_elem.id = "sending"
				sending_text_elem.style="display:none;"
				sending_text_elem.innerHTML = "SENDING..."

				diff_elem.appendChild(sending_text_elem)
			}

			function fillSkills() {
				const skill_table = document.getElementById("skills")
				removeAllChildNodes(skill_table)

				skill_table.innerHTML = `
					<tr>
						<th>Skill</th>
						<th>Characteristic</th>
						<th>Career?</th>
						<th>Rank</th>
						<th></th>
					</tr>
				`
				for (const [skill, info] of Object.entries(playerData[currentCharacter]["skills"])) {
					const characteristic_nickname = playerData[currentCharacter]["characteristics"][info["characteristic"]]["nickname"]

					let skill_row_elem = document.createElement('tr')

					let skill_name_elem = document.createElement('td')
					skill_name_elem.innerHTML = info["name"]

					let characteristic_nickname_elem = document.createElement('td')
					characteristic_nickname_elem.innerHTML = characteristic_nickname

					let career_elem = document.createElement('td')
					let career_check = document.createElement('input')
					career_check.type = 'checkbox'
					career_check.name = `${skill}-career`
					career_check.checked = info["career"]
					career_check.addEventListener("change", (event) => {
						playerData[currentCharacter]["skills"][skill]["career"] = event.target.checked
						calculateXP()
					})
					career_elem.appendChild(career_check)

					let rank_elem = document.createElement('td')
					let lvl_selector = makeLevelSelector(skill, (name, rank) => {
						playerData[currentCharacter]["skills"][name]["rank"] = rank
						calculateXP()
					})
					setLevel(playerData[currentCharacter]["skills"][skill]["rank"], lvl_selector)
					rank_elem.appendChild(lvl_selector)

					let button_elem = document.createElement('td')
					const button = document.createElement('button')
					button.innerHTML = "Roll"
					button.addEventListener("click", () => {
						currentSkill = skill
						const diff_elem = document.getElementById("difficulty-popup")
						diff_elem.style.display = "block"
					})
					button_elem.appendChild(button)

					skill_row_elem.appendChild(skill_name_elem)
					skill_row_elem.appendChild(characteristic_nickname_elem)
					skill_row_elem.appendChild(career_elem)
					skill_row_elem.appendChild(rank_elem)
					skill_row_elem.appendChild(button_elem)

					skill_table.appendChild(skill_row_elem)
				}
			}
			
			function fillXP() {
				let totalXPHolder = document.getElementById("total-xp")
				calculateXP()
				totalXPHolder.addEventListener("change", (event) => {
					playerData[currentCharacter]["base"]["totalXP"] = parseInt(event.target.value)
					calculateXP()
				})
			}

			function calculateXP() {
				let xp = playerData[currentCharacter]["base"]["totalXP"]

				let xpUsed = 0

				for (const [skill, info] of Object.entries(playerData[currentCharacter]["skills"])) {
					if (info["rank"] > 0) {
						const initialValue = info["career"] ? 0 : 5*info["rank"]
						xpUsed += range(info["rank"], 1).reduce((partialSum, a) => {
							return partialSum + a*5
						}, initialValue);
					}
				}

				let xpLeft = xp - xpUsed

				let totalXPHolder = document.getElementById("total-xp")
				totalXPHolder.setAttribute("value", xp)

				let usedXPHolder = document.getElementById("used-xp")
				usedXPHolder.innerHTML = xpUsed

				let unusedXPHolder = document.getElementById("unused-xp")
				unusedXPHolder.innerHTML = xpLeft
			}

			function range(size, startAt = 0) {
					return [...Array(size).keys()].map(i => i + startAt);
			}

			function removeAllChildNodes(parent) {
					while (parent.firstChild) {
							parent.removeChild(parent.firstChild);
					}
			}

			function removeAllListeners(element){
				var newElement = element.cloneNode(true);
				element.parentNode.replaceChild(newElement, element);
			}

			function getDieValuesForSkill(skill) {
				const skillRank = playerData[currentCharacter]["skills"][skill]["rank"]
				const skillCharacteristic = playerData[currentCharacter]["skills"][skill]["characteristic"]
				const characteristicRank = playerData[currentCharacter]["characteristics"][skillCharacteristic]["rank"]

				const greens = Math.max(skillRank, characteristicRank) - Math.min(skillRank, characteristicRank)
				const yellows = Math.min(skillRank, characteristicRank)
				const blues = getLevelValue("blue")
				const purples = getLevelValue("purple")
				const blacks = getLevelValue("black")
				const reds = getLevelValue("red")

				return {
					"greens": greens,
					"yellows": yellows,
					"blues": parseInt(blues),
					"purples": parseInt(purples),
					"blacks": parseInt(blacks),
					"reds": parseInt(reds),
				}
			}

			function getDieValuesForCharacteristic(characteristic) {
				const characteristicRank = playerData[currentCharacter]["characteristics"][characteristic]["rank"]

				const greens = characteristicRank
				const yellows = 0
				const blues = getLevelValue("blue")
				const purples = getLevelValue("purple")
				const blacks = getLevelValue("black")
				const reds = getLevelValue("red")

				return {
					"greens": greens,
					"yellows": yellows,
					"blues": parseInt(blues),
					"purples": parseInt(purples),
					"blacks": parseInt(blacks),
					"reds": parseInt(reds),
				}
			}

			function getLevelValue(name) {
				var rank_els = document.getElementsByName(name);

				for(i = 0; i < rank_els.length; i++) {
					if(rank_els[i].hasAttribute("checked")){
						return rank_els[i].getAttribute("value")
					}
				}

				return null
			}

			function makeLevelSelector(name, callback = (name, rating) => {}) {
				let div_elem = document.createElement('div')
				div_elem.setAttribute('class', 'rater')

				let clear_elem = document.createElement('span')
				clear_elem.setAttribute('value', 0)
				clear_elem.setAttribute('class', "level_selector")
				clear_elem.setAttribute('name', name)
				clear_elem.innerHTML = `<i class="fas fa-ban"></i>`
				clear_elem.setAttribute('checked', '')
				clear_elem.addEventListener('click', function () {
					var rating = parseInt(this.getAttribute("value"));
					callback(name, rating)
					return setLevel(rating, div_elem);
				})
				
				div_elem.appendChild(clear_elem)

				for (let i = 1; i <= 5; i++) {
					let level_selctor_button_elem = document.createElement('span')
					level_selctor_button_elem.setAttribute('value', i)
					level_selctor_button_elem.setAttribute('class', "level_selector")
					level_selctor_button_elem.setAttribute('name', name)
					level_selctor_button_elem.innerHTML = `<i class="far fa-square"></i>`
					level_selctor_button_elem.addEventListener('click', function () {
						var rating = parseInt(this.getAttribute("value"));
						callback(name, rating)
						return setLevel(rating, div_elem);
					})

					div_elem.appendChild(level_selctor_button_elem)
				}
				return div_elem
			}

			function clearDifficultyLevels() {
				let holder = document.getElementById("difficulty-popup")
				let selectors = holder.getElementsByClassName("rater")
				for (selector of selectors) {
					setLevel(0, selector)
				}
			}

			function setLevel(currentLevel, levels_cont) {
				levels = levels_cont.getElementsByClassName("level_selector")
				levels[0].removeAttribute("checked")
				for (let i = 1; i < levels.length; i++) {
					levels[i].removeAttribute("checked")
					if (i <= currentLevel) {
						levels[i].innerHTML = '<i class="fa fa-square"></i>';
					} else {
						levels[i].innerHTML = '<i class="far fa-square"></i>';
					}
				}
				levels[currentLevel].setAttribute("checked", '')
			}

			function sendRequest(text, callback = ()=>{}) {
				let xhr = new XMLHttpRequest();
				xhr.open("POST", window.location.href, true);
				xhr.setRequestHeader('Content-Type', 'application/text');
				xhr.send(text);	
				xhr.onload = callback
				
			}

			function sendRoll(rollData, callback = ()=>{}) {
				const rollJsonString = JSON.stringify(rollData);
				sendRequest("roll" + postSeperator + rollJsonString, callback);	
			}

			function sendSave() {
				const saveJsonString = JSON.stringify(playerData[currentCharacter]);
				let statpop = document.getElementById("status-popup")
				statpop.innerHTML = "Saving..."
				statpop.style.display = "block"
				sendRequest("save" + postSeperator + saveJsonString, () => {
					setTimeout(function () {
						statpop.style.display = "None"
					}, 1000)
				});	
			}

			function sendDestiny() {
				console.log("Rolling Destiny...")
				sendRequest("destiny", () => {
					console.log("Rolled.")
				});	
			}

			function sendShutdownServer() {
				sendRequest("shutdown");	
			}
		</script>
	</body>
</html>